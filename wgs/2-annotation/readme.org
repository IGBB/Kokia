#+TITLE: Annotation
#+PROPERTY:  header-args :var DIR=(file-name-directory buffer-file-name)

#+name:genomes
| Name | Fasta                         |
|------+-------------------------------|
| Kc   | 1-assembly/5-curate/Kc.fa.gz  |
| Kd   | 1-assembly/5-curate/Kd.fa.gz  |
| Kk   | 1-assembly/5-curate/Kk.fa.gz  |
| Gk   | 1-assembly/0-ref/kirkii.fa.gz |

* Repeats

- Run RepeatModeler
   #+header: :var genomes=genomes
  #+begin_src sh :tangle 1-repeats/1-modeler.sh
     ROOT=$(git rev-parse --show-toplevel)
     ml singularity

     line=$(sed -n ${SLURM_ARRAY_TASK_ID}p <<<"$genomes")
     read name fasta <<<"$line"

     export BLAST_USAGE_REPORT=false

     SCRATCH=/local/scratch/tony.arick/$SLURM_JOB_ID/
     cd $SCRATCH

     singularity exec -B $ROOT -B $SCRATCH $DIR/apps/dfam-tetools-1.87.sif \
                 BuildDatabase -name $SCRATCH/$name.db $ROOT/wgs/$fasta
     singularity exec -B $ROOT -B $SCRATCH $DIR/apps/dfam-tetools-1.87.sif \
                 RepeatModeler -database $SCRATCH/$name.db \
                 -threads 48 -LTRStruct

     mkdir $DIR/1-repeats/$name/
     cp -r $SCRATCH $DIR/1-repeats/$name/modeler
  #+end_src

  #+RESULTS:

- Run RepeatMasker
   #+header: :var genomes=genomes
  #+begin_src sh :tangle 1-repeats/2-masker.sh
ROOT=$(git rev-parse --show-toplevel)
ml singularity

line=$(sed -n ${SLURM_ARRAY_TASK_ID}p <<<"$genomes")
read name fasta <<<"$line"

export BLAST_USAGE_REPORT=false

SCRATCH=/local/scratch/tony.arick/$SLURM_JOB_ID/
cd $SCRATCH

zcat -f $ROOT/wgs/$fasta > $SCRATCH/$name.fa

singularity exec -B $ROOT -B $SCRATCH $DIR/apps/dfam-tetools-1.87.sif \
            RepeatMasker -pa 48 \
                          -lib $DIR/1-repeats/$name/modeler/$name.db-families.fa \
                           $SCRATCH/$name.fa

cp -r $SCRATCH $DIR/1-repeats/$name/masker

  #+end_src

* Braker3
#+header: :var genomes=genomes[,0]
#+begin_src sh :tangle 2-braker3/run.sh
  ROOT=$(git rev-parse --show-toplevel)
  name=$(sed -n ${SLURM_ARRAY_TASK_ID}p <<<"$genomes")

  ml singularity

  SCRATCH=/local/scratch/tony.arick/$SLURM_JOB_ID/
  mkdir $DIR/2-braker3/$name
  cd $DIR/2-braker3/$name

  mkdir $DIR/2-braker3/$name/home
  cp $HOME/.gm_key $DIR/2-braker3/$name/home

  singularity exec --cleanenv -H $DIR/2-braker3/$name/home \
                   -B $ROOT -B $SCRATCH \
              $DIR/apps/braker3_v.1.0.4.1.sif braker.pl \
                  --species=$name \
                  --genome=$DIR/1-repeats/$name/masker/$name.fa.masked \
                  --prot_seq=$DIR/2-braker3/Viridiplantae.fa \
                  --threads=48 \
                  --workingdir=$SCRATCH
  cp -r $SCRATCH $DIR/2-braker3/$name/output

#+end_src

#+RESULTS:

* Rename
:PROPERTIES:
:ORDERED:  t
:END:
#+header: :var genomes=genomes
  #+begin_src sh :tangle 3-rename.sh
    ROOT=$(git rev-parse --show-toplevel)

      declare -A names 
      names["Kc"]="Kocoo"
      names["Kk"]="Kokau"
      names["Kd"]="Kodry"
      names["Gk"]="Gokir"

      cat <<<"$genomes" |
          grep 'Kc' |
          while read i fasta; do
              cp $ROOT/wgs/$fasta $DIR/${names[$i]}.fa.gz
              
  #            tar -O -xf 2-braker3/$i.tar braker.gtf |
              cat $DIR/2-braker3/$i/output/braker.gtf |
                  awk '$1 != chr { chr=$1; c=1;
                                   num=$1; sub(".._", "0", num);
                                   num=substr(num, length(num)-2, 3)
                       }
                       $3 == "gene" {
                           name = $9;
                           rep=sprintf("%s.%03sG%04d00", spec, num, c++)
                       }
                       1 { gsub(name, rep, $9);
                           sub("\\.t", ".", $9);
                           print }' \
                      FS="\t" OFS="\t" spec=${names[$i]} |
                      gzip > $DIR/${names[$i]}.gtf.gz
          done
  #+end_src


- Graph

  #+begin_src R 
    library(tidyverse)

    data <- list.files(pattern=".gtf.gz") %>%
      setNames(substring(., 0,5)) %>%
      lapply(data.table::fread) %>%
      bind_rows(.id='Species') %>%
      filter(V3 == "gene") %>%
      mutate(chr = substring(V1, 4)) %>%
      group_by(Species, chr) %>%
      count()

    data %>%
      mutate(chr = factor(chr, c('01', '2_4', '03',
                                 sprintf('%02d', 5:13)))) %>%
    ggplot(aes(chr, n, shape=Species, color=Species)) +
      geom_point(position=position_dodge(width=0.5)) +
      scale_y_continuous(limits=c(0,4600), expand=c(0,0),
                         name="Number of Genes") +
      scale_x_discrete(expand=c(0,0), name="Chromosome") +
      theme_minimal() +
      theme(panel.grid.major.x=element_blank())

    ggsave('gene-counts.png', width=12, height=4, bg='white')
  #+end_src
[[./gene-counts.png]]
*  InterproScan

Download latest version of iprscan: [[https://ftp.ebi.ac.uk/pub/software/unix/iprscan/5/5.65-97.0/interproscan-5.65-97.0-64-bit.tar.gz][5.65-97.0]]
#+begin_src sh
IPRSCAN_URL=https://ftp.ebi.ac.uk/pub/software/unix/iprscan/5
cd $DIR/apps
wget $IPRSCAN_URL/5.65-97.0/interproscan-5.65-97.0-64-bit.tar.gz

ml singularity
singularity pull docker://interpro/interproscan:5.65-97.0
#+end_src
Initial IPR Setup 
#+begin_src sh
IPRDATA=$DIR/apps/interproscan-5.65-97.0/data
singularity exec \
    -B $IPRDATA:/opt/interproscan/data -B $DIR \
    $DIR/apps/interproscan_5.65-97.0.sif \
    cd /opt/interproscan && \
    python3 setup.py -f interproscan.properties
 
#+end_src

Get protein sequences from renamed gtf file
#+header: :var genomes=genomes
#+begin_src sh :tangle 4-iprscan/peptides.sh
ROOT=$(git rev-parse --show-toplevel)
PATH=$DIR/apps/gffread-0.12.7.Linux_x86_64/:$PATH
PATH=$DIR/apps/samtools-1.17/:$PATH

declare -A names
names["Kc"]="Kocoo"
names["Kk"]="Kokau"
names["Kd"]="Kodry"
names["Gk"]="Gokir"

for name in ${!genomes[@]}; do
    tmp_fasta=$(mktemp)
    tmp_gtf=$(mktemp)

    zcat $ROOT/wgs/${genomes[$name]} > $tmp_fasta
    zcat $DIR/${names[$name]}.gtf.gz > $tmp_gtf

    gffread -J -y $DIR/4-iprscan/$name.pep.fa \
        -g $tmp_fasta $tmp_gtf

    rm $tmp_fasta
    rm $tmp_gtf

    samtools faidx $DIR/4-iprscan/$name.pep.fa
done
#+end_src

Run iprscan on protein sequences. Sequences will be split into 20 batches each
#+begin_src sh :tangle 4-iprscan/run.sh
ml singularity

PATH=$DIR/apps/samtools-1.17/:$PATH
PATH=$DIR/apps/interproscan-5.65-97.0/:$PATH

SCRATCH=/local/scratch/tony.arick/$SLURM_JOB_ID/

# Set spec with --export=spec=Kd

PREFIX=$spec.pep.$SLURM_ARRAY_TASK_ID

split -n "l/$SLURM_ARRAY_TASK_ID/20" $DIR/4-iprscan/$spec.pep.fa.fai |
    cut -f 1 |
    samtools faidx -r - $DIR/4-iprscan/$spec.pep.fa \
        > $SCRATCH/$PREFIX.fa

IPRDATA=$DIR/apps/interproscan-5.65-97.0/data
singularity exec \
    -B $IPRDATA:/opt/interproscan/data -B $DIR \
    $DIR/apps/interproscan_5.65-97.0.sif \
    /opt/interproscan/interproscan.sh \
    -i $SCRATCH/$PREFIX.fa \
    -f xml,tsv \
    -pathways \
    -iprlookup \
    -goterms \
    -dp  \
    -appl 'Pfam, PRINTS, PANTHER, TIGRFAM, SUPERFAMILY, PIRSF, ProSiteProfiles, ProSitePatterns, SMART' \
    -b $SCRATCH/$PREFIX \
    -cpu $SLURM_CPUS_PER_TASK \
    > $DIR/4-iprscan/$PREFIX.log

mv $SCRATCH/$PREFIX.{tsv,xml} $DIR/4-iprscan/
#+end_src
