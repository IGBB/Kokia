#+title: Compare Genomes
#+PROPERTY:  header-args :var DIR=(my/dir)

#+name:anno
| Name  | braker gtf                | Fasta                         |
|-------+---------------------------+-------------------------------|
| Kocoo | 2-annotation/Kocoo.gtf.gz | 1-assembly/5-curate/Kc.fa.gz  |
| Kodry | 2-annotation/Kodry.gtf.gz | 1-assembly/5-curate/Kd.fa.gz  |
| Kokau | 2-annotation/Kokau.gtf.gz | 1-assembly/5-curate/Kk.fa.gz  |
| Gokir | 2-annotation/Gokir.gtf.gz | 1-assembly/0-ref/kirkii.fa.gz |


* Genespace

- Get bed files
  #+header: :var anno=anno
  #+begin_src sh :tangle 1-genespace/bed/run.sh
    ROOT=$(git rev-parse --show-toplevel)

    cat <<<"$anno" |
        while read name gtf fasta; do
            zcat $ROOT/wgs/$gtf |
                grep '^K' |
                awk '$3 == "transcript" {print $1,$4,$5,$9}' \
                    FS="\t" OFS="\t" > $DIR/1-genespace/bed/$name.bed
        done
  #+end_src

  #+RESULTS:

- Get peptide files
  #+header: :var anno=anno
  #+begin_src sh :tangle 1-genespace/peptide/run.sh
    ROOT=$(git rev-parse --show-toplevel)
    PATH=$DIR/apps/gffread-0.12.7.Linux_x86_64/:$PATH
    PATH=$DIR/apps/samtools-1.17/:$PATH

    cat <<<"$anno" |
        while read name gtf fasta; do
            tmp_fasta=$(mktemp)
            tmp_gtf=$(mktemp)

            zcat $ROOT/wgs/$fasta > $tmp_fasta
            zcat $ROOT/wgs/$gtf |
                grep '^K' > $tmp_gtf
            
            gffread -J -y $DIR/1-genespace/peptide/$name.fa \
                    -g $tmp_fasta $tmp_gtf
                                   
            rm $tmp_fasta
            rm $tmp_gtf
        done
  #+end_src
- Run Genescape
  #+begin_src R :tangle 1-genespace/run.R
    library(GENESPACE)

    gpar <- init_genespace(
          wd = file.path(DIR, "1-genespace") ,
          genomeIDs=c("Kocoo", "Kodry", "Kokau", "Gokir"), 
          path2mcscanx = file.path(DIR, "apps", "MCScanX"),
          path2orthofinder = file.path(DIR, "apps", "orthofinder"),
          path2diamond = file.path(DIR, "apps", "diamond"),
          nCores = 48)

    out <- run_genespace(gpar)
    
  #+end_src


* Hi-C

Mapping the hi-c libraries of the three kokia samples to the four
genomes to validate SV found in genespace.

#+name: hic
| Name  | Forward                                              | Reverse                                              |
|-------+------------------------------------------------------+------------------------------------------------------|
| Kocoo | Kc/hi-c/Kc_HiC_CKDL220020122-1A_HCWYNDSX5_L1_1.fq.gz | Kc/hi-c/Kc_HiC_CKDL220020122-1A_HCWYNDSX5_L1_2.fq.gz |
| Kodry | kd/hi-c/kokia_S3HiC_R1.fastq.gz                      | kd/hi-c/kokia_S3HiC_R2.fastq.gz                      |
| Kokau | Kk/hi-c/Kk_HiC_CKDL220020123-1A_HCWYNDSX5_L1_1.fq.gz | Kk/hi-c/Kk_HiC_CKDL220020123-1A_HCWYNDSX5_L1_2.fq.gz |

- Create bwa database for assembly
  #+header: :var anno=anno
  #+begin_src sh :tangle 2-hic/0-db/run.sh
    ROOT=$(git rev-parse --show-toplevel)
    PATH=$DIR/apps/bwa-0.7.17:$PATH

    line=$(sed -n ${SLURM_ARRAY_TASK_ID}p <<<"$anno")
    read name gtf fasta <<<"$line"

    bwa index -a bwtsw -p $DIR/2-hic/0-db/$name $ROOT/wgs/$fasta
  #+end_src
- Align Hi-C data to assembly
  #+header: :var data=hic
  #+begin_src sh :tangle 2-hic/1-bwa/run.sh
    ROOT=$(git rev-parse --show-toplevel)
    RAW=$(realpath $ROOT/wgs/0-raw/)

    PATH=$DIR/apps/bwa-0.7.17:$PATH
    PATH=$DIR/apps/samtools-1.17/bin:$PATH
    PATH=$PATH:$DIR/apps/samblaster-v.0.1.26/

    line=$(sed -n ${SLURM_ARRAY_TASK_ID}p <<<"$data")
    read name fwd rev <<<"$line"

    bwa mem -5SP -t 48 $DIR/2-hic/0-db/$DB $RAW/$fwd $RAW/$rev |
        samblaster |
        samtools view -bS -F 2316 |
        samtools sort -m 60G -o $DIR/2-hic/1-bwa/$DB-$name.bam
  #+end_src


- Graph
  #+begin_src sh :tangle 2-hic/2-viz/run.sh
    ml gd/
    PATH=$DIR/apps/hic-viz:$PATH
    PATH=$DIR/apps/samtools-1.17/bin:$PATH

    for name in {Gk,Kc,Kd,Kk}-Kk; do
        bam=$DIR/2-hic/1-bwa/$name.bam
        echo hic-viz $bam '>' $DIR/2-hic/2-viz/$name.png
        # samtools view -H $bam |
        #     awk '$1 == "@SQ" { sub("SN:", "", $2); print $2 }' 
    done | parallel
  #+end_src

* BUSCO

- Get eudicot lineage
  #+begin_src sh :tangle 3-busco/download-lineage.sh
  wget -O- --no-check \
       https://busco-data.ezlab.org/v5/data/lineages/eudicots_odb10.2020-09-10.tar.gz |
      tar -xz -C $DIR/3-busco
#+end_src
- Run all 
  #+header: :var anno=anno
  #+begin_src sh :tangle 3-busco/run.sh
    PATH=$DIR/apps/gffread-0.12.7.Linux_x86_64/:$PATH
    ROOT=$(git rev-parse --show-toplevel)
    ml singularity

    busco () { singularity exec -B $DIR $DIR/apps/busco-v5.5.0_cv1 busco "$@" ; }

    line=$(sed -n ${SLURM_ARRAY_TASK_ID}p <<<"$anno")
    read name gtf fasta <<<"$line"

    SCRATCH=/local/scratch/tony.arick/$SLURM_JOB_ID/
    zcat $ROOT/wgs/$fasta > $SCRATCH/$name.genome.fa
    zcat $ROOT/wgs/$gtf |
        grep '^K' > $SCRATCH/$name.gtf

    gffread -J \
            -w $SCRATCH/$name.trans.fa \
            -y $SCRATCH/$name.protein.fa \
            -g $SCRATCH/$name.genome.fa \
               $SCRATCH/$name.gtf

    for type in genome trans protein; do
        mkdir $SCRATCH/$type
        cd $SCRATCH/$type
        
        busco -i $SCRATCH/$name.$type.fa \
          -l $DIR/3-busco/eudicots_odb10 \
          -m $type  \
          -o $name \
          -c 48

        tar -C $SCRATCH/$type/$name -cf $DIR/3-busco/$name.$type.tar \
            short_summary.specific.eudicots_odb10.$name.txt \
            short_summary.specific.eudicots_odb10.$name.json \
            logs \
            run_eudicots_odb10
    done
  #+end_src

- Graph
  #+begin_src sh  
    for i in Kocoo Kodry Kokau Gokir; do
        for type in genome trans protein; do
          tar -O -xf 3-busco/$i.$type.tar \
            short_summary.specific.eudicots_odb10.$i.json \
            > $i.$type.json;
      done
    done
  #+end_src
  #+begin_src R
    library(tidyverse)
    library(rjson)
    library(cowplot)


    plots <- lapply(c("Genome", "Protein"),
                    function(mode){

                      data <- paste(c("Gokir", "Kocoo", "Kodry", "Kokau"),
                                    tolower(mode), "json", sep=".") %>%
                        setNames(sub(".json", "", .)) %>%
                        lapply(function (file) fromJSON(file=file)$results) %>%
                        lapply(as.data.frame) %>%
                        bind_rows(.id="Species.type") %>%
                        separate(Species.type, into=c("Species", "Mode")) %>%
                        select(Species, label=one_line_summary,
                               Single.copy, Multi.copy, Fragmented, Missing) %>%
                        mutate(Species = factor(Species, c("Gokir", "Kocoo", "Kodry", "Kokau"),
                                                c("Gossypioides kirkii",
                                                  "Kokia cookei",
                                                  "Kokia drynarioides",
                                                  "Kokia kauaiensis"))) %>%
                        gather(-Species, -label, key="key", value="value")

                      labels <- select(data, Species, label)

                      ggplot(data) +
                        geom_col(aes(value, Species, fill=key)) +
                        geom_text(aes(0, Species, label=label), labels, hjust=-0.01) +
                        scale_fill_manual(values = c('#33a02c','#b2df8a',
                                                     '#fdbf6f', '#fb9a99'),
                                          name = element_blank(),
                                          breaks = c("Single.copy",
                                                     "Multi.copy",
                                                     "Missing",
                                                     "Fragmented"),
                                          labels = c("Single Copy",
                                                     "Duplicated",
                                                     "Missing",
                                                     "Fragmented")) +
                        scale_x_continuous(expand=c(0,0)) +
                        ggtitle(mode) +
                        theme_minimal() +
                        theme(axis.title = element_blank(),
                              axis.text.x = element_blank(),
                              legend.position="none",
                              axis.text.y = element_text(face="italic"))
                    })

    plots[[3]] = get_legend(plots[[1]] + theme(legend.position="bottom"))
    plots[[2]] = plots[[2]] + ggtitle("Annotation");
    plot_grid(plotlist = plots, rel_heights=c(1,1,0.3), ncol=1)

    ggsave("busco.all.png", width=7, height=3, bg="white")
  #+end_src
  [[./busco.all.png]]

    #+begin_src R :session kokiaR
      library(tidyverse)
      library(rjson)


      paste(c("Gokir", "Kocoo", "Kodry", "Kokau"),
                    "genome", "json", sep=".") %>%
        setNames(sub(".json", "", .)) %>%
        lapply(function (file) fromJSON(file=file)$results) %>%
        lapply(as.data.frame) %>%
        bind_rows(.id="Species.type") %>%
        separate(Species.type, into=c("Species", "Mode")) %>%
        select(Species, Number.of.contigs, Total.length, Percent.gaps, Contigs.N50) %>%
        mutate(Species = factor(Species, c("Gokir", "Kocoo", "Kodry", "Kokau"),
                                c("Gossypioides kirkii",
                                  "Kokia cookei",
                                  "Kokia drynarioides",
                                  "Kokia kauaiensis")))

  #+end_src

#+RESULTS:
| Species             | Num Contigs | Totla length | Percent Gaps | Contig N50 |
|-                    |             |              |              |            |
| Gossypioides kirkii |         288 |    538117542 |       0.005% |    8700000 |
| Kokia cookei        |        2300 |    563551662 |       0.017% |    1771125 |
| Kokia drynarioides  |         780 |    511904237 |       0.015% |    1881333 |
| Kokia kauaiensis    |        2094 |    556827260 |       0.019% |    1469000 |


